"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.dockerCredentialsInstallCommands = exports.DockerCredentialUsage = exports.DockerCredential = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const ec2 = require("@aws-cdk/aws-ec2");
const iam = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
/**
 * Represents credentials used to access a Docker registry.
 */
class DockerCredential {
    constructor(usages) {
        this.usages = usages;
    }
    /**
     * Creates a DockerCredential for DockerHub.
     * Convenience method for `customRegistry('https://index.docker.io/v1/', opts)`.
     */
    static dockerHub(secret, opts = {}) {
        try {
            jsiiDeprecationWarnings._aws_cdk_pipelines_ExternalDockerCredentialOptions(opts);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.dockerHub);
            }
            throw error;
        }
        return new ExternalDockerCredential('https://index.docker.io/v1/', secret, opts);
    }
    /**
     * Creates a DockerCredential for a registry, based on its domain name (e.g., 'www.example.com').
     */
    static customRegistry(registryDomain, secret, opts = {}) {
        try {
            jsiiDeprecationWarnings._aws_cdk_pipelines_ExternalDockerCredentialOptions(opts);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.customRegistry);
            }
            throw error;
        }
        return new ExternalDockerCredential(registryDomain, secret, opts);
    }
    /**
     * Creates a DockerCredential for one or more ECR repositories.
     *
     * NOTE - All ECR repositories in the same account and region share a domain name
     * (e.g., 0123456789012.dkr.ecr.eu-west-1.amazonaws.com), and can only have one associated
     * set of credentials (and DockerCredential). Attempting to associate one set of credentials
     * with one ECR repo and another with another ECR repo in the same account and region will
     * result in failures when using these credentials in the pipeline.
     */
    static ecr(repositories, opts) {
        try {
            jsiiDeprecationWarnings._aws_cdk_pipelines_EcrDockerCredentialOptions(opts);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.ecr);
            }
            throw error;
        }
        return new EcrDockerCredential(repositories, opts ?? {});
    }
    /**
     * Determines if this credential is relevant to the input usage.
     * @internal
     */
    _applicableForUsage(usage) {
        return !this.usages || this.usages.includes(usage);
    }
}
exports.DockerCredential = DockerCredential;
_a = JSII_RTTI_SYMBOL_1;
DockerCredential[_a] = { fqn: "@aws-cdk/pipelines.DockerCredential", version: "1.204.0" };
/** Defines which stages of a pipeline require the specified credentials */
var DockerCredentialUsage;
(function (DockerCredentialUsage) {
    /** Synth/Build */
    DockerCredentialUsage["SYNTH"] = "SYNTH";
    /** Self-update */
    DockerCredentialUsage["SELF_UPDATE"] = "SELF_UPDATE";
    /** Asset publishing */
    DockerCredentialUsage["ASSET_PUBLISHING"] = "ASSET_PUBLISHING";
})(DockerCredentialUsage = exports.DockerCredentialUsage || (exports.DockerCredentialUsage = {}));
;
/** DockerCredential defined by registry domain and a secret */
class ExternalDockerCredential extends DockerCredential {
    constructor(registryDomain, secret, opts) {
        super(opts.usages);
        this.registryDomain = registryDomain;
        this.secret = secret;
        this.opts = opts;
    }
    grantRead(grantee, usage) {
        if (!this._applicableForUsage(usage)) {
            return;
        }
        if (this.opts.assumeRole) {
            grantee.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({
                actions: ['sts:AssumeRole'],
                resources: [this.opts.assumeRole.roleArn],
            }));
        }
        const role = this.opts.assumeRole ?? grantee;
        this.secret.grantRead(role);
    }
    _renderCdkAssetsConfig() {
        return {
            [this.registryDomain]: {
                secretsManagerSecretId: this.secret.secretArn,
                secretsUsernameField: this.opts.secretUsernameField,
                secretsPasswordField: this.opts.secretPasswordField,
                assumeRoleArn: this.opts.assumeRole?.roleArn,
            },
        };
    }
}
/** DockerCredential defined by a set of ECR repositories in the same account & region */
class EcrDockerCredential extends DockerCredential {
    constructor(repositories, opts) {
        super(opts.usages);
        this.repositories = repositories;
        this.opts = opts;
        if (repositories.length === 0) {
            throw new Error('must supply at least one `ecr.IRepository` to create an `EcrDockerCredential`');
        }
        this.registryDomain = core_1.Fn.select(0, core_1.Fn.split('/', repositories[0].repositoryUri));
    }
    grantRead(grantee, usage) {
        if (!this._applicableForUsage(usage)) {
            return;
        }
        if (this.opts.assumeRole) {
            grantee.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({
                actions: ['sts:AssumeRole'],
                resources: [this.opts.assumeRole.roleArn],
            }));
        }
        const role = this.opts.assumeRole ?? grantee;
        this.repositories.forEach(repo => repo.grantPull(role));
    }
    _renderCdkAssetsConfig() {
        return {
            [this.registryDomain]: {
                ecrRepository: true,
                assumeRoleArn: this.opts.assumeRole?.roleArn,
            },
        };
    }
}
/**
 * Creates a set of OS-specific buildspec installation commands for setting up the given
 * registries and associated credentials.
 *
 * @param registries - Registries to configure credentials for. It is an error to provide
 * multiple registries for the same domain.
 * @param osType - (optional) Defaults to Linux.
 * @returns An array of commands to configure cdk-assets to use these credentials.
 */
function dockerCredentialsInstallCommands(usage, registries, osType) {
    const relevantRegistries = (registries ?? []).filter(reg => reg._applicableForUsage(usage));
    if (!relevantRegistries || relevantRegistries.length === 0) {
        return [];
    }
    const domainCredentials = relevantRegistries.reduce(function (map, registry) {
        Object.assign(map, registry._renderCdkAssetsConfig());
        return map;
    }, {});
    const cdkAssetsConfigFile = {
        version: '1.0',
        domainCredentials,
    };
    const windowsCommands = [
        'mkdir %USERPROFILE%\\.cdk',
        `echo '${JSON.stringify(cdkAssetsConfigFile)}' > %USERPROFILE%\\.cdk\\cdk-docker-creds.json`,
    ];
    const linuxCommands = [
        'mkdir $HOME/.cdk',
        `echo '${JSON.stringify(cdkAssetsConfigFile)}' > $HOME/.cdk/cdk-docker-creds.json`,
    ];
    if (osType === 'both') {
        return [
            // These tags are magic and will be stripped when rendering the project
            ...windowsCommands.map(c => `!WINDOWS!${c}`),
            ...linuxCommands.map(c => `!LINUX!${c}`),
        ];
    }
    else if (osType === ec2.OperatingSystemType.WINDOWS) {
        return windowsCommands;
    }
    else {
        return linuxCommands;
    }
}
exports.dockerCredentialsInstallCommands = dockerCredentialsInstallCommands;
//# sourceMappingURL=data:application/json;base64,