"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineBase = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("@aws-cdk/core");
const blueprint_1 = require("../blueprint");
// v2 - keep this import as a separate section to reduce merge conflict when forward merging with the v2 branch.
// eslint-disable-next-line
const core_2 = require("@aws-cdk/core");
/**
 * A generic CDK Pipelines pipeline
 *
 * Different deployment systems will provide subclasses of `Pipeline` that generate
 * the deployment infrastructure necessary to deploy CDK apps, specific to that system.
 *
 * This library comes with the `CodePipeline` class, which uses AWS CodePipeline
 * to deploy CDK apps.
 *
 * The actual pipeline infrastructure is constructed (by invoking the engine)
 * when `buildPipeline()` is called, or when `app.synth()` is called (whichever
 * happens first).
 */
class PipelineBase extends core_2.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.built = false;
        try {
            jsiiDeprecationWarnings._aws_cdk_pipelines_PipelineBaseProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, PipelineBase);
            }
            throw error;
        }
        if (props.synth instanceof blueprint_1.ShellStep && !props.synth.primaryOutput) {
            props.synth.primaryOutputDirectory('cdk.out');
        }
        if (!props.synth.primaryOutput) {
            throw new Error(`synthStep ${props.synth} must produce a primary output, but is not producing anything. Configure the Step differently or use a different Step type.`);
        }
        this.synth = props.synth;
        this.waves = [];
        this.cloudAssemblyFileSet = props.synth.primaryOutput;
        core_1.Aspects.of(this).add({ visit: () => this.buildJustInTime() });
    }
    /**
     * Deploy a single Stage by itself
     *
     * Add a Stage to the pipeline, to be deployed in sequence with other
     * Stages added to the pipeline. All Stacks in the stage will be deployed
     * in an order automatically determined by their relative dependencies.
     */
    addStage(stage, options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_pipelines_AddStageOpts(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addStage);
            }
            throw error;
        }
        if (this.built) {
            throw new Error('addStage: can\'t add Stages anymore after buildPipeline() has been called');
        }
        return this.addWave(stage.stageName).addStage(stage, options);
    }
    /**
     * Add a Wave to the pipeline, for deploying multiple Stages in parallel
     *
     * Use the return object of this method to deploy multiple stages in parallel.
     *
     * Example:
     *
     * ```ts
     * declare const pipeline: pipelines.CodePipeline;
     *
     * const wave = pipeline.addWave('MyWave');
     * wave.addStage(new MyApplicationStage(this, 'Stage1'));
     * wave.addStage(new MyApplicationStage(this, 'Stage2'));
     * ```
     */
    addWave(id, options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_pipelines_WaveOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addWave);
            }
            throw error;
        }
        if (this.built) {
            throw new Error('addWave: can\'t add Waves anymore after buildPipeline() has been called');
        }
        const wave = new blueprint_1.Wave(id, options);
        this.waves.push(wave);
        return wave;
    }
    /**
     * Send the current pipeline definition to the engine, and construct the pipeline
     *
     * It is not possible to modify the pipeline after calling this method.
     */
    buildPipeline() {
        if (this.built) {
            throw new Error('build() has already been called: can only call it once');
        }
        this.doBuildPipeline();
        this.built = true;
    }
    /**
     * Automatically call 'build()' just before synthesis if the user hasn't explicitly called it yet
     */
    buildJustInTime() {
        if (!this.built) {
            this.buildPipeline();
        }
    }
}
exports.PipelineBase = PipelineBase;
_a = JSII_RTTI_SYMBOL_1;
PipelineBase[_a] = { fqn: "@aws-cdk/pipelines.PipelineBase", version: "1.204.0" };
//# sourceMappingURL=data:application/json;base64,