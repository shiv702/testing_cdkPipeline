"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfirmPermissionsBroadening = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cpa = require("@aws-cdk/aws-codepipeline-actions");
const constructs_1 = require("constructs");
const blueprint_1 = require("../blueprint");
const application_security_check_1 = require("../private/application-security-check");
/**
 * Pause the pipeline if a deployment would add IAM permissions or Security Group rules
 *
 * This step is only supported in CodePipeline pipelines.
 */
class ConfirmPermissionsBroadening extends blueprint_1.Step {
    constructor(id, props) {
        super(id);
        this.props = props;
        try {
            jsiiDeprecationWarnings._aws_cdk_pipelines_PermissionsBroadeningCheckProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, ConfirmPermissionsBroadening);
            }
            throw error;
        }
    }
    produceAction(stage, options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_pipelines_ProduceActionOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.produceAction);
            }
            throw error;
        }
        const sec = this.getOrCreateSecCheck(options.pipeline);
        this.props.notificationTopic?.grantPublish(sec.cdkDiffProject);
        const variablesNamespace = constructs_1.Node.of(this.props.stage).addr;
        const approveActionName = `${options.actionName}.Confirm`;
        stage.addAction(new cpa.CodeBuildAction({
            runOrder: options.runOrder,
            actionName: `${options.actionName}.Check`,
            input: options.artifacts.toCodePipeline(options.pipeline.cloudAssemblyFileSet),
            project: sec.cdkDiffProject,
            variablesNamespace,
            environmentVariables: {
                STAGE_PATH: { value: constructs_1.Node.of(this.props.stage).path },
                STAGE_NAME: { value: stage.stageName },
                ACTION_NAME: { value: approveActionName },
                ...this.props.notificationTopic ? {
                    NOTIFICATION_ARN: { value: this.props.notificationTopic.topicArn },
                    NOTIFICATION_SUBJECT: { value: `Confirm permission broadening in ${this.props.stage.stageName}` },
                } : {},
            },
        }));
        stage.addAction(new cpa.ManualApprovalAction({
            actionName: approveActionName,
            runOrder: options.runOrder + 1,
            additionalInformation: `#{${variablesNamespace}.MESSAGE}`,
            externalEntityLink: `#{${variablesNamespace}.LINK}`,
        }));
        return { runOrdersConsumed: 2 };
    }
    getOrCreateSecCheck(pipeline) {
        const id = 'PipelinesSecurityCheck';
        const existing = constructs_1.Node.of(pipeline).tryFindChild(id);
        if (existing) {
            if (!(existing instanceof application_security_check_1.ApplicationSecurityCheck)) {
                throw new Error(`Expected '${constructs_1.Node.of(existing).path}' to be 'ApplicationSecurityCheck' but was '${existing}'`);
            }
            return existing;
        }
        return new application_security_check_1.ApplicationSecurityCheck(pipeline, id, {
            codePipeline: pipeline.pipeline,
        });
    }
}
exports.ConfirmPermissionsBroadening = ConfirmPermissionsBroadening;
_a = JSII_RTTI_SYMBOL_1;
ConfirmPermissionsBroadening[_a] = { fqn: "@aws-cdk/pipelines.ConfirmPermissionsBroadening", version: "1.204.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybS1wZXJtaXNzaW9ucy1icm9hZGVuaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uZmlybS1wZXJtaXNzaW9ucy1icm9hZGVuaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLHlEQUF5RDtBQUd6RCwyQ0FBa0M7QUFDbEMsNENBQW9DO0FBQ3BDLHNGQUFpRjtBQXVCakY7Ozs7R0FJRztBQUNILE1BQWEsNEJBQTZCLFNBQVEsZ0JBQUk7SUFDcEQsWUFBWSxFQUFVLEVBQW1CLEtBQXNDO1FBQzdFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUQ2QixVQUFLLEdBQUwsS0FBSyxDQUFpQzs7Ozs7OytDQURwRSw0QkFBNEI7Ozs7S0FHdEM7SUFFTSxhQUFhLENBQUMsS0FBYSxFQUFFLE9BQTZCOzs7Ozs7Ozs7O1FBQy9ELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxZQUFZLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRS9ELE1BQU0sa0JBQWtCLEdBQUcsaUJBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFMUQsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLE9BQU8sQ0FBQyxVQUFVLFVBQVUsQ0FBQztRQUMxRCxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQztZQUN0QyxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7WUFDMUIsVUFBVSxFQUFFLEdBQUcsT0FBTyxDQUFDLFVBQVUsUUFBUTtZQUN6QyxLQUFLLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQztZQUM5RSxPQUFPLEVBQUUsR0FBRyxDQUFDLGNBQWM7WUFDM0Isa0JBQWtCO1lBQ2xCLG9CQUFvQixFQUFFO2dCQUNwQixVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsaUJBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3JELFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsU0FBUyxFQUFFO2dCQUN0QyxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUU7Z0JBQ3pDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7b0JBQ2hDLGdCQUFnQixFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFO29CQUNsRSxvQkFBb0IsRUFBRSxFQUFFLEtBQUssRUFBRSxvQ0FBb0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEVBQUU7aUJBQ2xHLENBQUMsQ0FBQyxDQUFDLEVBQUU7YUFDUDtTQUNGLENBQUMsQ0FBQyxDQUFDO1FBRUosS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQztZQUMzQyxVQUFVLEVBQUUsaUJBQWlCO1lBQzdCLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxHQUFHLENBQUM7WUFDOUIscUJBQXFCLEVBQUUsS0FBSyxrQkFBa0IsV0FBVztZQUN6RCxrQkFBa0IsRUFBRSxLQUFLLGtCQUFrQixRQUFRO1NBQ3BELENBQUMsQ0FBQyxDQUFDO1FBRUosT0FBTyxFQUFFLGlCQUFpQixFQUFFLENBQUMsRUFBRSxDQUFDO0tBQ2pDO0lBRU8sbUJBQW1CLENBQUMsUUFBc0I7UUFDaEQsTUFBTSxFQUFFLEdBQUcsd0JBQXdCLENBQUM7UUFDcEMsTUFBTSxRQUFRLEdBQUcsaUJBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELElBQUksUUFBUSxFQUFFO1lBQ1osSUFBSSxDQUFDLENBQUMsUUFBUSxZQUFZLHFEQUF3QixDQUFDLEVBQUU7Z0JBQ25ELE1BQU0sSUFBSSxLQUFLLENBQUMsYUFBYSxpQkFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLCtDQUErQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO2FBQ2hIO1lBQ0QsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFFRCxPQUFPLElBQUkscURBQXdCLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRTtZQUNoRCxZQUFZLEVBQUUsUUFBUSxDQUFDLFFBQVE7U0FDaEMsQ0FBQyxDQUFDO0tBQ0o7O0FBcERILG9FQXFEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTdGFnZSB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1jb2RlcGlwZWxpbmUnO1xuaW1wb3J0ICogYXMgY3BhIGZyb20gJ0Bhd3MtY2RrL2F3cy1jb2RlcGlwZWxpbmUtYWN0aW9ucyc7XG5pbXBvcnQgKiBhcyBzbnMgZnJvbSAnQGF3cy1jZGsvYXdzLXNucyc7XG5pbXBvcnQgeyBTdGFnZSB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgU3RlcCB9IGZyb20gJy4uL2JsdWVwcmludCc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblNlY3VyaXR5Q2hlY2sgfSBmcm9tICcuLi9wcml2YXRlL2FwcGxpY2F0aW9uLXNlY3VyaXR5LWNoZWNrJztcbmltcG9ydCB7IENvZGVQaXBlbGluZSB9IGZyb20gJy4vY29kZXBpcGVsaW5lJztcbmltcG9ydCB7IENvZGVQaXBlbGluZUFjdGlvbkZhY3RvcnlSZXN1bHQsIElDb2RlUGlwZWxpbmVBY3Rpb25GYWN0b3J5LCBQcm9kdWNlQWN0aW9uT3B0aW9ucyB9IGZyb20gJy4vY29kZXBpcGVsaW5lLWFjdGlvbi1mYWN0b3J5JztcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBhIGBQZXJtaXNzaW9uc0Jyb2FkZW5pbmdDaGVja2BcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQZXJtaXNzaW9uc0Jyb2FkZW5pbmdDaGVja1Byb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBDREsgU3RhZ2Ugb2JqZWN0IHRvIGNoZWNrIHRoZSBzdGFja3Mgb2ZcbiAgICpcbiAgICogVGhpcyBzaG91bGQgYmUgdGhlIHNhbWUgU3RhZ2Ugb2JqZWN0IHlvdSBhcmUgcGFzc2luZyB0byBgYWRkU3RhZ2UoKWAuXG4gICAqL1xuICByZWFkb25seSBzdGFnZTogU3RhZ2U7XG5cbiAgLyoqXG4gICAqIFRvcGljIHRvIHNlbmQgbm90aWZpY2F0aW9ucyB3aGVuIGEgaHVtYW4gbmVlZHMgdG8gZ2l2ZSBtYW51YWwgY29uZmlybWF0aW9uXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gbm8gbm90aWZpY2F0aW9uXG4gICAqL1xuICByZWFkb25seSBub3RpZmljYXRpb25Ub3BpYz86IHNucy5JVG9waWNcbn1cblxuLyoqXG4gKiBQYXVzZSB0aGUgcGlwZWxpbmUgaWYgYSBkZXBsb3ltZW50IHdvdWxkIGFkZCBJQU0gcGVybWlzc2lvbnMgb3IgU2VjdXJpdHkgR3JvdXAgcnVsZXNcbiAqXG4gKiBUaGlzIHN0ZXAgaXMgb25seSBzdXBwb3J0ZWQgaW4gQ29kZVBpcGVsaW5lIHBpcGVsaW5lcy5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbmZpcm1QZXJtaXNzaW9uc0Jyb2FkZW5pbmcgZXh0ZW5kcyBTdGVwIGltcGxlbWVudHMgSUNvZGVQaXBlbGluZUFjdGlvbkZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nLCBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBQZXJtaXNzaW9uc0Jyb2FkZW5pbmdDaGVja1Byb3BzKSB7XG4gICAgc3VwZXIoaWQpO1xuICB9XG5cbiAgcHVibGljIHByb2R1Y2VBY3Rpb24oc3RhZ2U6IElTdGFnZSwgb3B0aW9uczogUHJvZHVjZUFjdGlvbk9wdGlvbnMpOiBDb2RlUGlwZWxpbmVBY3Rpb25GYWN0b3J5UmVzdWx0IHtcbiAgICBjb25zdCBzZWMgPSB0aGlzLmdldE9yQ3JlYXRlU2VjQ2hlY2sob3B0aW9ucy5waXBlbGluZSk7XG4gICAgdGhpcy5wcm9wcy5ub3RpZmljYXRpb25Ub3BpYz8uZ3JhbnRQdWJsaXNoKHNlYy5jZGtEaWZmUHJvamVjdCk7XG5cbiAgICBjb25zdCB2YXJpYWJsZXNOYW1lc3BhY2UgPSBOb2RlLm9mKHRoaXMucHJvcHMuc3RhZ2UpLmFkZHI7XG5cbiAgICBjb25zdCBhcHByb3ZlQWN0aW9uTmFtZSA9IGAke29wdGlvbnMuYWN0aW9uTmFtZX0uQ29uZmlybWA7XG4gICAgc3RhZ2UuYWRkQWN0aW9uKG5ldyBjcGEuQ29kZUJ1aWxkQWN0aW9uKHtcbiAgICAgIHJ1bk9yZGVyOiBvcHRpb25zLnJ1bk9yZGVyLFxuICAgICAgYWN0aW9uTmFtZTogYCR7b3B0aW9ucy5hY3Rpb25OYW1lfS5DaGVja2AsXG4gICAgICBpbnB1dDogb3B0aW9ucy5hcnRpZmFjdHMudG9Db2RlUGlwZWxpbmUob3B0aW9ucy5waXBlbGluZS5jbG91ZEFzc2VtYmx5RmlsZVNldCksXG4gICAgICBwcm9qZWN0OiBzZWMuY2RrRGlmZlByb2plY3QsXG4gICAgICB2YXJpYWJsZXNOYW1lc3BhY2UsXG4gICAgICBlbnZpcm9ubWVudFZhcmlhYmxlczoge1xuICAgICAgICBTVEFHRV9QQVRIOiB7IHZhbHVlOiBOb2RlLm9mKHRoaXMucHJvcHMuc3RhZ2UpLnBhdGggfSxcbiAgICAgICAgU1RBR0VfTkFNRTogeyB2YWx1ZTogc3RhZ2Uuc3RhZ2VOYW1lIH0sXG4gICAgICAgIEFDVElPTl9OQU1FOiB7IHZhbHVlOiBhcHByb3ZlQWN0aW9uTmFtZSB9LFxuICAgICAgICAuLi50aGlzLnByb3BzLm5vdGlmaWNhdGlvblRvcGljID8ge1xuICAgICAgICAgIE5PVElGSUNBVElPTl9BUk46IHsgdmFsdWU6IHRoaXMucHJvcHMubm90aWZpY2F0aW9uVG9waWMudG9waWNBcm4gfSxcbiAgICAgICAgICBOT1RJRklDQVRJT05fU1VCSkVDVDogeyB2YWx1ZTogYENvbmZpcm0gcGVybWlzc2lvbiBicm9hZGVuaW5nIGluICR7dGhpcy5wcm9wcy5zdGFnZS5zdGFnZU5hbWV9YCB9LFxuICAgICAgICB9IDoge30sXG4gICAgICB9LFxuICAgIH0pKTtcblxuICAgIHN0YWdlLmFkZEFjdGlvbihuZXcgY3BhLk1hbnVhbEFwcHJvdmFsQWN0aW9uKHtcbiAgICAgIGFjdGlvbk5hbWU6IGFwcHJvdmVBY3Rpb25OYW1lLFxuICAgICAgcnVuT3JkZXI6IG9wdGlvbnMucnVuT3JkZXIgKyAxLFxuICAgICAgYWRkaXRpb25hbEluZm9ybWF0aW9uOiBgI3ske3ZhcmlhYmxlc05hbWVzcGFjZX0uTUVTU0FHRX1gLFxuICAgICAgZXh0ZXJuYWxFbnRpdHlMaW5rOiBgI3ske3ZhcmlhYmxlc05hbWVzcGFjZX0uTElOS31gLFxuICAgIH0pKTtcblxuICAgIHJldHVybiB7IHJ1bk9yZGVyc0NvbnN1bWVkOiAyIH07XG4gIH1cblxuICBwcml2YXRlIGdldE9yQ3JlYXRlU2VjQ2hlY2socGlwZWxpbmU6IENvZGVQaXBlbGluZSk6IEFwcGxpY2F0aW9uU2VjdXJpdHlDaGVjayB7XG4gICAgY29uc3QgaWQgPSAnUGlwZWxpbmVzU2VjdXJpdHlDaGVjayc7XG4gICAgY29uc3QgZXhpc3RpbmcgPSBOb2RlLm9mKHBpcGVsaW5lKS50cnlGaW5kQ2hpbGQoaWQpO1xuICAgIGlmIChleGlzdGluZykge1xuICAgICAgaWYgKCEoZXhpc3RpbmcgaW5zdGFuY2VvZiBBcHBsaWNhdGlvblNlY3VyaXR5Q2hlY2spKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJyR7Tm9kZS5vZihleGlzdGluZykucGF0aH0nIHRvIGJlICdBcHBsaWNhdGlvblNlY3VyaXR5Q2hlY2snIGJ1dCB3YXMgJyR7ZXhpc3Rpbmd9J2ApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQXBwbGljYXRpb25TZWN1cml0eUNoZWNrKHBpcGVsaW5lLCBpZCwge1xuICAgICAgY29kZVBpcGVsaW5lOiBwaXBlbGluZS5waXBlbGluZSxcbiAgICB9KTtcbiAgfVxufSJdfQ==