"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineGraph = void 0;
const blueprint_1 = require("../blueprint");
const graph_1 = require("./graph");
const pipeline_queries_1 = require("./pipeline-queries");
/**
 * Logic to turn the deployment blueprint into a graph
 *
 * This code makes all the decisions on how to lay out the CodePipeline
 */
class PipelineGraph {
    constructor(pipeline, props = {}) {
        this.pipeline = pipeline;
        this.graph = graph_1.Graph.of('', { type: 'group' });
        this.added = new Map();
        this.assetNodes = new Map();
        this.assetNodesByType = new Map();
        this.stackOutputDependencies = new graph_1.DependencyBuilders();
        this._fileAssetCtr = 0;
        this._dockerAssetCtr = 0;
        this.publishTemplate = props.publishTemplate ?? false;
        this.prepareStep = props.prepareStep ?? true;
        this.singlePublisher = props.singlePublisherPerAssetType ?? false;
        this.queries = new pipeline_queries_1.PipelineQueries(pipeline);
        if (pipeline.synth instanceof blueprint_1.Step) {
            this.synthNode = this.addBuildStep(pipeline.synth);
            if (this.synthNode?.data?.type === 'step') {
                this.synthNode.data.isBuildStep = true;
            }
        }
        this.lastPreparationNode = this.synthNode;
        const cloudAssembly = pipeline.synth.primaryOutput?.primaryOutput;
        if (!cloudAssembly) {
            throw new Error(`The synth step must produce the cloud assembly artifact, but doesn't: ${pipeline.synth}`);
        }
        this.cloudAssemblyFileSet = cloudAssembly;
        if (props.selfMutation) {
            const stage = graph_1.Graph.of('UpdatePipeline', { type: 'group' });
            this.graph.add(stage);
            this.selfMutateNode = graph_1.GraphNode.of('SelfMutate', { type: 'self-update' });
            stage.add(this.selfMutateNode);
            this.selfMutateNode.dependOn(this.synthNode);
            this.lastPreparationNode = this.selfMutateNode;
        }
        const waves = pipeline.waves.map(w => this.addWave(w));
        // Make sure the waves deploy sequentially
        for (let i = 1; i < waves.length; i++) {
            waves[i].dependOn(waves[i - 1]);
        }
    }
    isSynthNode(node) {
        return this.synthNode === node;
    }
    addBuildStep(step) {
        return this.addAndRecurse(step, this.topLevelGraph('Build'));
    }
    addWave(wave) {
        // If the wave only has one Stage in it, don't add an additional Graph around it
        const retGraph = wave.stages.length === 1
            ? this.addStage(wave.stages[0])
            : graph_1.Graph.of(wave.id, { type: 'group' }, wave.stages.map(s => this.addStage(s)));
        this.addPrePost(wave.pre, wave.post, retGraph);
        retGraph.dependOn(this.lastPreparationNode);
        this.graph.add(retGraph);
        return retGraph;
    }
    addStage(stage) {
        const retGraph = graph_1.Graph.of(stage.stageName, { type: 'group' });
        const stackGraphs = new Map();
        for (const stack of stage.stacks) {
            const stackGraph = graph_1.Graph.of(this.simpleStackName(stack.stackName, stage.stageName), { type: 'stack-group', stack });
            const prepareNode = this.prepareStep ? graph_1.GraphNode.of('Prepare', { type: 'prepare', stack }) : undefined;
            const deployNode = graph_1.GraphNode.of('Deploy', {
                type: 'execute',
                stack,
                captureOutputs: this.queries.stackOutputsReferenced(stack).length > 0,
            });
            retGraph.add(stackGraph);
            stackGraph.add(deployNode);
            // node or node collection that represents first point of contact in each stack
            let firstDeployNode;
            if (prepareNode) {
                stackGraph.add(prepareNode);
                deployNode.dependOn(prepareNode);
                firstDeployNode = prepareNode;
            }
            else {
                firstDeployNode = deployNode;
            }
            // add changeset steps at the stack level
            if (stack.changeSet.length > 0) {
                if (prepareNode) {
                    this.addChangeSet(stack.changeSet, prepareNode, deployNode, stackGraph);
                }
                else {
                    throw new Error('Your pipeline engine does not support changeSet steps');
                }
            }
            // add pre and post steps at the stack level
            const preNodes = this.addPrePost(stack.pre, stack.post, stackGraph);
            if (preNodes.nodes.length > 0) {
                firstDeployNode = preNodes;
            }
            stackGraphs.set(stack, stackGraph);
            const cloudAssembly = this.cloudAssemblyFileSet;
            firstDeployNode.dependOn(this.addAndRecurse(cloudAssembly.producer, retGraph));
            // add the template asset
            if (this.publishTemplate) {
                if (!stack.templateAsset) {
                    throw new Error(`"publishTemplate" is enabled, but stack ${stack.stackArtifactId} does not have a template asset`);
                }
                firstDeployNode.dependOn(this.publishAsset(stack.templateAsset));
            }
            // Depend on Assets
            // FIXME: Custom Cloud Assembly currently doesn't actually help separating
            // out templates from assets!!!
            for (const asset of stack.assets) {
                const assetNode = this.publishAsset(asset);
                firstDeployNode.dependOn(assetNode);
            }
            // Add stack output synchronization point
            if (this.queries.stackOutputsReferenced(stack).length > 0) {
                this.stackOutputDependencies.get(stack).dependOn(deployNode);
            }
        }
        for (const stack of stage.stacks) {
            for (const dep of stack.stackDependencies) {
                const stackNode = stackGraphs.get(stack);
                const depNode = stackGraphs.get(dep);
                if (!stackNode) {
                    throw new Error(`cannot find node for ${stack.stackName}`);
                }
                if (!depNode) {
                    throw new Error(`cannot find node for ${dep.stackName}`);
                }
                stackNode.dependOn(depNode);
            }
        }
        this.addPrePost(stage.pre, stage.post, retGraph);
        return retGraph;
    }
    addChangeSet(changeSet, prepareNode, deployNode, graph) {
        for (const c of changeSet) {
            const changeSetNode = this.addAndRecurse(c, graph);
            changeSetNode?.dependOn(prepareNode);
            deployNode.dependOn(changeSetNode);
        }
    }
    addPrePost(pre, post, parent) {
        const currentNodes = new graph_1.GraphNodeCollection(parent.nodes);
        const preNodes = new graph_1.GraphNodeCollection(new Array());
        for (const p of pre) {
            const preNode = this.addAndRecurse(p, parent);
            currentNodes.dependOn(preNode);
            preNodes.nodes.push(preNode);
        }
        for (const p of post) {
            const postNode = this.addAndRecurse(p, parent);
            postNode?.dependOn(...currentNodes.nodes);
        }
        return preNodes;
    }
    topLevelGraph(name) {
        let ret = this.graph.tryGetChild(name);
        if (!ret) {
            ret = new graph_1.Graph(name);
            this.graph.add(ret);
        }
        return ret;
    }
    addAndRecurse(step, parent) {
        if (step === PipelineGraph.NO_STEP) {
            return undefined;
        }
        const previous = this.added.get(step);
        if (previous) {
            return previous;
        }
        const node = graph_1.GraphNode.of(step.id, { type: 'step', step });
        // If the step is a source step, change the parent to a special "Source" stage
        // (CodePipeline wants it that way)
        if (step.isSource) {
            parent = this.topLevelGraph('Source');
        }
        parent.add(node);
        this.added.set(step, node);
        for (const dep of step.dependencies) {
            const producerNode = this.addAndRecurse(dep, parent);
            node.dependOn(producerNode);
        }
        // Add stack dependencies (by use of the dependency builder this also works
        // if we encounter the Step before the Stack has been properly added yet)
        if (step instanceof blueprint_1.ShellStep) {
            for (const output of Object.values(step.envFromCfnOutputs)) {
                const stack = this.queries.producingStack(output);
                this.stackOutputDependencies.get(stack).dependBy(node);
            }
        }
        return node;
    }
    publishAsset(stackAsset) {
        const assetsGraph = this.topLevelGraph('Assets');
        let assetNode = this.assetNodes.get(stackAsset.assetId);
        if (assetNode) {
            // If there's already a node publishing this asset, add as a new publishing
            // destination to the same node.
        }
        else if (this.singlePublisher && this.assetNodesByType.has(stackAsset.assetType)) {
            // If we're doing a single node per type, lookup by that
            assetNode = this.assetNodesByType.get(stackAsset.assetType);
        }
        else {
            // Otherwise add a new one
            const id = stackAsset.assetType === blueprint_1.AssetType.FILE
                ? (this.singlePublisher ? 'FileAsset' : `FileAsset${++this._fileAssetCtr}`)
                : (this.singlePublisher ? 'DockerAsset' : `DockerAsset${++this._dockerAssetCtr}`);
            assetNode = graph_1.GraphNode.of(id, { type: 'publish-assets', assets: [] });
            assetsGraph.add(assetNode);
            assetNode.dependOn(this.lastPreparationNode);
            this.assetNodesByType.set(stackAsset.assetType, assetNode);
            this.assetNodes.set(stackAsset.assetId, assetNode);
        }
        const data = assetNode.data;
        if (data?.type !== 'publish-assets') {
            throw new Error(`${assetNode} has the wrong data.type: ${data?.type}`);
        }
        if (!data.assets.some(a => a.assetSelector === stackAsset.assetSelector)) {
            data.assets.push(stackAsset);
        }
        return assetNode;
    }
    /**
     * Simplify the stack name by removing the `Stage-` prefix if it exists.
     */
    simpleStackName(stackName, stageName) {
        return stripPrefix(stackName, `${stageName}-`);
    }
}
exports.PipelineGraph = PipelineGraph;
/**
 * A Step object that may be used as the producer of FileSets that should not be represented in the graph
 */
PipelineGraph.NO_STEP = new class extends blueprint_1.Step {
}('NO_STEP');
function stripPrefix(s, prefix) {
    return s.startsWith(prefix) ? s.slice(prefix.length) : s;
}
//# sourceMappingURL=data:application/json;base64,