function _aws_cdk_pipelines_CdkPipelineProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("cloudAssemblyArtifact" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#cloudAssemblyArtifact", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("assetBuildSpec" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#assetBuildSpec", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("assetPreInstallCommands" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#assetPreInstallCommands", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("cdkCliVersion" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#cdkCliVersion", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("codePipeline" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#codePipeline", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("crossAccountKeys" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#crossAccountKeys", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("dockerCredentials" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#dockerCredentials", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.dockerCredentials != null)
            for (const o of p.dockerCredentials)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_DockerCredential(o);
        if ("enableKeyRotation" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#enableKeyRotation", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("pipelineName" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#pipelineName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("selfMutating" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#selfMutating", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("selfMutationBuildSpec" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#selfMutationBuildSpec", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("singlePublisherPerType" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#singlePublisherPerType", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("sourceAction" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#sourceAction", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("subnetSelection" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#subnetSelection", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("supportDockerAssets" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#supportDockerAssets", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("synthAction" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#synthAction", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("vpc" in p)
            print("@aws-cdk/pipelines.CdkPipelineProps#vpc", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_CdkPipeline(p) {
}
function _aws_cdk_pipelines_CdkStageProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("cloudAssemblyArtifact" in p)
            print("@aws-cdk/pipelines.CdkStageProps#cloudAssemblyArtifact", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("host" in p)
            print("@aws-cdk/pipelines.CdkStageProps#host", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (!visitedObjects.has(p.host))
            _aws_cdk_pipelines_IStageHost(p.host);
        if ("pipelineStage" in p)
            print("@aws-cdk/pipelines.CdkStageProps#pipelineStage", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("stageName" in p)
            print("@aws-cdk/pipelines.CdkStageProps#stageName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("confirmBroadeningPermissions" in p)
            print("@aws-cdk/pipelines.CdkStageProps#confirmBroadeningPermissions", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("securityNotificationTopic" in p)
            print("@aws-cdk/pipelines.CdkStageProps#securityNotificationTopic", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_CdkStage(p) {
}
function _aws_cdk_pipelines_AddStackOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("executeRunOrder" in p)
            print("@aws-cdk/pipelines.AddStackOptions#executeRunOrder", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("runOrder" in p)
            print("@aws-cdk/pipelines.AddStackOptions#runOrder", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_StackOutput(p) {
}
function _aws_cdk_pipelines_IStageHost(p) {
}
function _aws_cdk_pipelines_AssetPublishingCommand(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("assetId" in p)
            print("@aws-cdk/pipelines.AssetPublishingCommand#assetId", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("assetManifestPath" in p)
            print("@aws-cdk/pipelines.AssetPublishingCommand#assetManifestPath", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("assetPublishingRoleArn" in p)
            print("@aws-cdk/pipelines.AssetPublishingCommand#assetPublishingRoleArn", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("assetSelector" in p)
            print("@aws-cdk/pipelines.AssetPublishingCommand#assetSelector", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("assetType" in p)
            print("@aws-cdk/pipelines.AssetPublishingCommand#assetType", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (!visitedObjects.has(p.assetType))
            _aws_cdk_pipelines_AssetType(p.assetType);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_BaseStageOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("confirmBroadeningPermissions" in p)
            print("@aws-cdk/pipelines.BaseStageOptions#confirmBroadeningPermissions", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("securityNotificationTopic" in p)
            print("@aws-cdk/pipelines.BaseStageOptions#securityNotificationTopic", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_AddStageOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("extraRunOrderSpace" in p)
            print("@aws-cdk/pipelines.AddStageOptions#extraRunOrderSpace", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("manualApprovals" in p)
            print("@aws-cdk/pipelines.AddStageOptions#manualApprovals", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("confirmBroadeningPermissions" in p)
            print("@aws-cdk/pipelines.BaseStageOptions#confirmBroadeningPermissions", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("securityNotificationTopic" in p)
            print("@aws-cdk/pipelines.BaseStageOptions#securityNotificationTopic", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_AddManualApprovalOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("actionName" in p)
            print("@aws-cdk/pipelines.AddManualApprovalOptions#actionName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("runOrder" in p)
            print("@aws-cdk/pipelines.AddManualApprovalOptions#runOrder", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_SimpleSynthOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("cloudAssemblyArtifact" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#cloudAssemblyArtifact", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("sourceArtifact" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#sourceArtifact", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("actionName" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#actionName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("additionalArtifacts" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#additionalArtifacts", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.additionalArtifacts != null)
            for (const o of p.additionalArtifacts)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_AdditionalArtifact(o);
        if ("buildSpec" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#buildSpec", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("copyEnvironmentVariables" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#copyEnvironmentVariables", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("environment" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#environment", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("environmentVariables" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#environmentVariables", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.environmentVariables != null)
            for (const o of Object.values(p.environmentVariables))
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-codebuild/.warnings.jsii.js")._aws_cdk_aws_codebuild_BuildEnvironmentVariable(o);
        if ("projectName" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#projectName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("rolePolicyStatements" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#rolePolicyStatements", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.rolePolicyStatements != null)
            for (const o of p.rolePolicyStatements)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-iam/.warnings.jsii.js")._aws_cdk_aws_iam_PolicyStatement(o);
        if ("subdirectory" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#subdirectory", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("subnetSelection" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#subnetSelection", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("vpc" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#vpc", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_SimpleSynthActionProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("synthCommand" in p)
            print("@aws-cdk/pipelines.SimpleSynthActionProps#synthCommand", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("buildCommand" in p)
            print("@aws-cdk/pipelines.SimpleSynthActionProps#buildCommand", "Use `buildCommands` instead");
        if ("buildCommands" in p)
            print("@aws-cdk/pipelines.SimpleSynthActionProps#buildCommands", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("installCommand" in p)
            print("@aws-cdk/pipelines.SimpleSynthActionProps#installCommand", "Use `installCommands` instead");
        if ("installCommands" in p)
            print("@aws-cdk/pipelines.SimpleSynthActionProps#installCommands", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("testCommands" in p)
            print("@aws-cdk/pipelines.SimpleSynthActionProps#testCommands", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("cloudAssemblyArtifact" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#cloudAssemblyArtifact", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("sourceArtifact" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#sourceArtifact", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("actionName" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#actionName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("additionalArtifacts" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#additionalArtifacts", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.additionalArtifacts != null)
            for (const o of p.additionalArtifacts)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_AdditionalArtifact(o);
        if ("buildSpec" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#buildSpec", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("copyEnvironmentVariables" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#copyEnvironmentVariables", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("environment" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#environment", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("environmentVariables" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#environmentVariables", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.environmentVariables != null)
            for (const o of Object.values(p.environmentVariables))
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-codebuild/.warnings.jsii.js")._aws_cdk_aws_codebuild_BuildEnvironmentVariable(o);
        if ("projectName" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#projectName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("rolePolicyStatements" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#rolePolicyStatements", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.rolePolicyStatements != null)
            for (const o of p.rolePolicyStatements)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-iam/.warnings.jsii.js")._aws_cdk_aws_iam_PolicyStatement(o);
        if ("subdirectory" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#subdirectory", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("subnetSelection" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#subnetSelection", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("vpc" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#vpc", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_AdditionalArtifact(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("artifact" in p)
            print("@aws-cdk/pipelines.AdditionalArtifact#artifact", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("directory" in p)
            print("@aws-cdk/pipelines.AdditionalArtifact#directory", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_SimpleSynthAction(p) {
}
function _aws_cdk_pipelines_StandardNpmSynthOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("buildCommand" in p)
            print("@aws-cdk/pipelines.StandardNpmSynthOptions#buildCommand", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("installCommand" in p)
            print("@aws-cdk/pipelines.StandardNpmSynthOptions#installCommand", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("synthCommand" in p)
            print("@aws-cdk/pipelines.StandardNpmSynthOptions#synthCommand", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("testCommands" in p)
            print("@aws-cdk/pipelines.StandardNpmSynthOptions#testCommands", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("cloudAssemblyArtifact" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#cloudAssemblyArtifact", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("sourceArtifact" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#sourceArtifact", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("actionName" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#actionName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("additionalArtifacts" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#additionalArtifacts", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.additionalArtifacts != null)
            for (const o of p.additionalArtifacts)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_AdditionalArtifact(o);
        if ("buildSpec" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#buildSpec", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("copyEnvironmentVariables" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#copyEnvironmentVariables", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("environment" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#environment", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("environmentVariables" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#environmentVariables", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.environmentVariables != null)
            for (const o of Object.values(p.environmentVariables))
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-codebuild/.warnings.jsii.js")._aws_cdk_aws_codebuild_BuildEnvironmentVariable(o);
        if ("projectName" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#projectName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("rolePolicyStatements" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#rolePolicyStatements", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.rolePolicyStatements != null)
            for (const o of p.rolePolicyStatements)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-iam/.warnings.jsii.js")._aws_cdk_aws_iam_PolicyStatement(o);
        if ("subdirectory" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#subdirectory", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("subnetSelection" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#subnetSelection", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("vpc" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#vpc", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_StandardYarnSynthOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("buildCommand" in p)
            print("@aws-cdk/pipelines.StandardYarnSynthOptions#buildCommand", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("installCommand" in p)
            print("@aws-cdk/pipelines.StandardYarnSynthOptions#installCommand", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("synthCommand" in p)
            print("@aws-cdk/pipelines.StandardYarnSynthOptions#synthCommand", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("testCommands" in p)
            print("@aws-cdk/pipelines.StandardYarnSynthOptions#testCommands", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("cloudAssemblyArtifact" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#cloudAssemblyArtifact", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("sourceArtifact" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#sourceArtifact", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("actionName" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#actionName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("additionalArtifacts" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#additionalArtifacts", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.additionalArtifacts != null)
            for (const o of p.additionalArtifacts)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_AdditionalArtifact(o);
        if ("buildSpec" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#buildSpec", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("copyEnvironmentVariables" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#copyEnvironmentVariables", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("environment" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#environment", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("environmentVariables" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#environmentVariables", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.environmentVariables != null)
            for (const o of Object.values(p.environmentVariables))
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-codebuild/.warnings.jsii.js")._aws_cdk_aws_codebuild_BuildEnvironmentVariable(o);
        if ("projectName" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#projectName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("rolePolicyStatements" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#rolePolicyStatements", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.rolePolicyStatements != null)
            for (const o of p.rolePolicyStatements)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-iam/.warnings.jsii.js")._aws_cdk_aws_iam_PolicyStatement(o);
        if ("subdirectory" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#subdirectory", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("subnetSelection" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#subnetSelection", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("vpc" in p)
            print("@aws-cdk/pipelines.SimpleSynthOptions#vpc", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_DeployCdkStackActionOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("cloudAssemblyInput" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#cloudAssemblyInput", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("baseActionName" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#baseActionName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("changeSetName" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#changeSetName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("executeRunOrder" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#executeRunOrder", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("output" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#output", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("outputFileName" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#outputFileName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("prepareRunOrder" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#prepareRunOrder", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_DeployCdkStackActionProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("actionRole" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionProps#actionRole", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("stackName" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionProps#stackName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("templatePath" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionProps#templatePath", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("cloudFormationExecutionRole" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionProps#cloudFormationExecutionRole", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("dependencyStackArtifactIds" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionProps#dependencyStackArtifactIds", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("region" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionProps#region", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("stackArtifactId" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionProps#stackArtifactId", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("templateConfigurationPath" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionProps#templateConfigurationPath", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("cloudAssemblyInput" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#cloudAssemblyInput", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("baseActionName" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#baseActionName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("changeSetName" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#changeSetName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("executeRunOrder" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#executeRunOrder", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("output" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#output", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("outputFileName" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#outputFileName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("prepareRunOrder" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#prepareRunOrder", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_CdkStackActionFromArtifactOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("stackName" in p)
            print("@aws-cdk/pipelines.CdkStackActionFromArtifactOptions#stackName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("cloudAssemblyInput" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#cloudAssemblyInput", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("baseActionName" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#baseActionName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("changeSetName" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#changeSetName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("executeRunOrder" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#executeRunOrder", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("output" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#output", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("outputFileName" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#outputFileName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("prepareRunOrder" in p)
            print("@aws-cdk/pipelines.DeployCdkStackActionOptions#prepareRunOrder", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_DeployCdkStackAction(p) {
}
function _aws_cdk_pipelines_FromStackArtifactOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("cloudAssemblyInput" in p)
            print("@aws-cdk/pipelines.FromStackArtifactOptions#cloudAssemblyInput", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("executeRunOrder" in p)
            print("@aws-cdk/pipelines.FromStackArtifactOptions#executeRunOrder", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("output" in p)
            print("@aws-cdk/pipelines.FromStackArtifactOptions#output", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("outputFileName" in p)
            print("@aws-cdk/pipelines.FromStackArtifactOptions#outputFileName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("prepareRunOrder" in p)
            print("@aws-cdk/pipelines.FromStackArtifactOptions#prepareRunOrder", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_PublishAssetsActionProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("actionName" in p)
            print("@aws-cdk/pipelines.PublishAssetsActionProps#actionName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("assetType" in p)
            print("@aws-cdk/pipelines.PublishAssetsActionProps#assetType", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (!visitedObjects.has(p.assetType))
            _aws_cdk_pipelines_AssetType(p.assetType);
        if ("cloudAssemblyInput" in p)
            print("@aws-cdk/pipelines.PublishAssetsActionProps#cloudAssemblyInput", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("buildSpec" in p)
            print("@aws-cdk/pipelines.PublishAssetsActionProps#buildSpec", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("cdkCliVersion" in p)
            print("@aws-cdk/pipelines.PublishAssetsActionProps#cdkCliVersion", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("createBuildspecFile" in p)
            print("@aws-cdk/pipelines.PublishAssetsActionProps#createBuildspecFile", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("dependable" in p)
            print("@aws-cdk/pipelines.PublishAssetsActionProps#dependable", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("preInstallCommands" in p)
            print("@aws-cdk/pipelines.PublishAssetsActionProps#preInstallCommands", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("projectName" in p)
            print("@aws-cdk/pipelines.PublishAssetsActionProps#projectName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("role" in p)
            print("@aws-cdk/pipelines.PublishAssetsActionProps#role", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("subnetSelection" in p)
            print("@aws-cdk/pipelines.PublishAssetsActionProps#subnetSelection", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("vpc" in p)
            print("@aws-cdk/pipelines.PublishAssetsActionProps#vpc", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_PublishAssetsAction(p) {
}
function _aws_cdk_pipelines_UpdatePipelineActionProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("cloudAssemblyInput" in p)
            print("@aws-cdk/pipelines.UpdatePipelineActionProps#cloudAssemblyInput", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("pipelineStackHierarchicalId" in p)
            print("@aws-cdk/pipelines.UpdatePipelineActionProps#pipelineStackHierarchicalId", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("buildSpec" in p)
            print("@aws-cdk/pipelines.UpdatePipelineActionProps#buildSpec", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("cdkCliVersion" in p)
            print("@aws-cdk/pipelines.UpdatePipelineActionProps#cdkCliVersion", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("dockerCredentials" in p)
            print("@aws-cdk/pipelines.UpdatePipelineActionProps#dockerCredentials", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.dockerCredentials != null)
            for (const o of p.dockerCredentials)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_DockerCredential(o);
        if ("pipelineStackName" in p)
            print("@aws-cdk/pipelines.UpdatePipelineActionProps#pipelineStackName", "- Use `pipelineStackHierarchicalId` instead.");
        if ("privileged" in p)
            print("@aws-cdk/pipelines.UpdatePipelineActionProps#privileged", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("projectName" in p)
            print("@aws-cdk/pipelines.UpdatePipelineActionProps#projectName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_UpdatePipelineAction(p) {
}
function _aws_cdk_pipelines_ShellScriptActionProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("actionName" in p)
            print("@aws-cdk/pipelines.ShellScriptActionProps#actionName", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("commands" in p)
            print("@aws-cdk/pipelines.ShellScriptActionProps#commands", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("additionalArtifacts" in p)
            print("@aws-cdk/pipelines.ShellScriptActionProps#additionalArtifacts", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.additionalArtifacts != null)
            for (const o of p.additionalArtifacts)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-codepipeline/.warnings.jsii.js")._aws_cdk_aws_codepipeline_Artifact(o);
        if ("bashOptions" in p)
            print("@aws-cdk/pipelines.ShellScriptActionProps#bashOptions", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("environment" in p)
            print("@aws-cdk/pipelines.ShellScriptActionProps#environment", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("environmentVariables" in p)
            print("@aws-cdk/pipelines.ShellScriptActionProps#environmentVariables", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.environmentVariables != null)
            for (const o of Object.values(p.environmentVariables))
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-codebuild/.warnings.jsii.js")._aws_cdk_aws_codebuild_BuildEnvironmentVariable(o);
        if ("rolePolicyStatements" in p)
            print("@aws-cdk/pipelines.ShellScriptActionProps#rolePolicyStatements", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.rolePolicyStatements != null)
            for (const o of p.rolePolicyStatements)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-iam/.warnings.jsii.js")._aws_cdk_aws_iam_PolicyStatement(o);
        if ("runOrder" in p)
            print("@aws-cdk/pipelines.ShellScriptActionProps#runOrder", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("securityGroups" in p)
            print("@aws-cdk/pipelines.ShellScriptActionProps#securityGroups", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.securityGroups != null)
            for (const o of p.securityGroups)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-ec2/.warnings.jsii.js")._aws_cdk_aws_ec2_ISecurityGroup(o);
        if ("subnetSelection" in p)
            print("@aws-cdk/pipelines.ShellScriptActionProps#subnetSelection", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if ("useOutputs" in p)
            print("@aws-cdk/pipelines.ShellScriptActionProps#useOutputs", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        if (p.useOutputs != null)
            for (const o of Object.values(p.useOutputs))
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_StackOutput(o);
        if ("vpc" in p)
            print("@aws-cdk/pipelines.ShellScriptActionProps#vpc", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_ShellScriptAction(p) {
}
function _aws_cdk_pipelines_AssetType(p) {
}
function _aws_cdk_pipelines_FileSet(p) {
}
function _aws_cdk_pipelines_IFileSetProducer(p) {
}
function _aws_cdk_pipelines_ShellStepProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.additionalInputs != null)
            for (const o of Object.values(p.additionalInputs))
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_IFileSetProducer(o);
        if (p.envFromCfnOutputs != null)
            for (const o of Object.values(p.envFromCfnOutputs))
                if (!visitedObjects.has(o))
                    require("@aws-cdk/core/.warnings.jsii.js")._aws_cdk_core_CfnOutput(o);
        if (!visitedObjects.has(p.input))
            _aws_cdk_pipelines_IFileSetProducer(p.input);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_ShellStep(p) {
}
function _aws_cdk_pipelines_FileSetLocation(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (!visitedObjects.has(p.fileSet))
            _aws_cdk_pipelines_FileSet(p.fileSet);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_StackOutputReference(p) {
}
function _aws_cdk_pipelines_StackDeploymentProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.assets != null)
            for (const o of p.assets)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_StackAsset(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_StackDeployment(p) {
}
function _aws_cdk_pipelines_StackAsset(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (!visitedObjects.has(p.assetType))
            _aws_cdk_pipelines_AssetType(p.assetType);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_StageDeploymentProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.post != null)
            for (const o of p.post)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_Step(o);
        if (p.pre != null)
            for (const o of p.pre)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_Step(o);
        if (p.stackSteps != null)
            for (const o of p.stackSteps)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_StackSteps(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_StageDeployment(p) {
}
function _aws_cdk_pipelines_Step(p) {
}
function _aws_cdk_pipelines_StackSteps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.changeSet != null)
            for (const o of p.changeSet)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_Step(o);
        if (p.post != null)
            for (const o of p.post)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_Step(o);
        if (p.pre != null)
            for (const o of p.pre)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_Step(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_WaveProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.post != null)
            for (const o of p.post)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_Step(o);
        if (p.pre != null)
            for (const o of p.pre)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_Step(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_Wave(p) {
}
function _aws_cdk_pipelines_AddStageOpts(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.post != null)
            for (const o of p.post)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_Step(o);
        if (p.pre != null)
            for (const o of p.pre)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_Step(o);
        if (p.stackSteps != null)
            for (const o of p.stackSteps)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_StackSteps(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_WaveOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.post != null)
            for (const o of p.post)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_Step(o);
        if (p.pre != null)
            for (const o of p.pre)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_Step(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_ManualApprovalStepProps(p) {
}
function _aws_cdk_pipelines_ManualApprovalStep(p) {
}
function _aws_cdk_pipelines_ArtifactMap(p) {
}
function _aws_cdk_pipelines_CodePipelineFileSet(p) {
}
function _aws_cdk_pipelines_CodeBuildStepProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.rolePolicyStatements != null)
            for (const o of p.rolePolicyStatements)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-iam/.warnings.jsii.js")._aws_cdk_aws_iam_PolicyStatement(o);
        if (p.securityGroups != null)
            for (const o of p.securityGroups)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-ec2/.warnings.jsii.js")._aws_cdk_aws_ec2_ISecurityGroup(o);
        if (p.additionalInputs != null)
            for (const o of Object.values(p.additionalInputs))
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_IFileSetProducer(o);
        if (p.envFromCfnOutputs != null)
            for (const o of Object.values(p.envFromCfnOutputs))
                if (!visitedObjects.has(o))
                    require("@aws-cdk/core/.warnings.jsii.js")._aws_cdk_core_CfnOutput(o);
        if (!visitedObjects.has(p.input))
            _aws_cdk_pipelines_IFileSetProducer(p.input);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_CodeBuildStep(p) {
}
function _aws_cdk_pipelines_PermissionsBroadeningCheckProps(p) {
}
function _aws_cdk_pipelines_ConfirmPermissionsBroadening(p) {
}
function _aws_cdk_pipelines_CodePipelineProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (!visitedObjects.has(p.synth))
            _aws_cdk_pipelines_IFileSetProducer(p.synth);
        if (!visitedObjects.has(p.assetPublishingCodeBuildDefaults))
            _aws_cdk_pipelines_CodeBuildOptions(p.assetPublishingCodeBuildDefaults);
        if (!visitedObjects.has(p.codeBuildDefaults))
            _aws_cdk_pipelines_CodeBuildOptions(p.codeBuildDefaults);
        if (p.dockerCredentials != null)
            for (const o of p.dockerCredentials)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_DockerCredential(o);
        if (!visitedObjects.has(p.selfMutationCodeBuildDefaults))
            _aws_cdk_pipelines_CodeBuildOptions(p.selfMutationCodeBuildDefaults);
        if (!visitedObjects.has(p.synthCodeBuildDefaults))
            _aws_cdk_pipelines_CodeBuildOptions(p.synthCodeBuildDefaults);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_CodeBuildOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.rolePolicy != null)
            for (const o of p.rolePolicy)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-iam/.warnings.jsii.js")._aws_cdk_aws_iam_PolicyStatement(o);
        if (p.securityGroups != null)
            for (const o of p.securityGroups)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/aws-ec2/.warnings.jsii.js")._aws_cdk_aws_ec2_ISecurityGroup(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_CodePipeline(p) {
}
function _aws_cdk_pipelines_ProduceActionOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (!visitedObjects.has(p.artifacts))
            _aws_cdk_pipelines_ArtifactMap(p.artifacts);
        if (!visitedObjects.has(p.pipeline))
            _aws_cdk_pipelines_CodePipeline(p.pipeline);
        if (!visitedObjects.has(p.codeBuildDefaults))
            _aws_cdk_pipelines_CodeBuildOptions(p.codeBuildDefaults);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_ICodePipelineActionFactory(p) {
}
function _aws_cdk_pipelines_CodePipelineActionFactoryResult(p) {
}
function _aws_cdk_pipelines_CodePipelineSource(p) {
}
function _aws_cdk_pipelines_GitHubSourceOptions(p) {
}
function _aws_cdk_pipelines_S3SourceOptions(p) {
}
function _aws_cdk_pipelines_ECRSourceOptions(p) {
}
function _aws_cdk_pipelines_ConnectionSourceOptions(p) {
}
function _aws_cdk_pipelines_CodeCommitSourceOptions(p) {
}
function _aws_cdk_pipelines_PipelineBaseProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (!visitedObjects.has(p.synth))
            _aws_cdk_pipelines_IFileSetProducer(p.synth);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_PipelineBase(p) {
}
function _aws_cdk_pipelines_DockerCredential(p) {
}
function _aws_cdk_pipelines_ExternalDockerCredentialOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.usages != null)
            for (const o of p.usages)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_DockerCredentialUsage(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_EcrDockerCredentialOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.usages != null)
            for (const o of p.usages)
                if (!visitedObjects.has(o))
                    _aws_cdk_pipelines_DockerCredentialUsage(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_pipelines_DockerCredentialUsage(p) {
}
function print(name, deprecationMessage) {
    const deprecated = process.env.JSII_DEPRECATED;
    const deprecationMode = ["warn", "fail", "quiet"].includes(deprecated) ? deprecated : "warn";
    const message = `${name} is deprecated.\n  ${deprecationMessage.trim()}\n  This API will be removed in the next major release.`;
    switch (deprecationMode) {
        case "fail":
            throw new DeprecationError(message);
        case "warn":
            console.warn("[WARNING]", message);
            break;
    }
}
function getPropertyDescriptor(obj, prop) {
    const descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    if (descriptor) {
        return descriptor;
    }
    const proto = Object.getPrototypeOf(obj);
    const prototypeDescriptor = proto && getPropertyDescriptor(proto, prop);
    if (prototypeDescriptor) {
        return prototypeDescriptor;
    }
    return {};
}
const visitedObjects = new Set();
class DeprecationError extends Error {
    constructor(...args) {
        super(...args);
        Object.defineProperty(this, "name", {
            configurable: false,
            enumerable: true,
            value: "DeprecationError",
            writable: false,
        });
    }
}
module.exports = { print, getPropertyDescriptor, DeprecationError, _aws_cdk_pipelines_CdkPipelineProps, _aws_cdk_pipelines_CdkPipeline, _aws_cdk_pipelines_CdkStageProps, _aws_cdk_pipelines_CdkStage, _aws_cdk_pipelines_AddStackOptions, _aws_cdk_pipelines_StackOutput, _aws_cdk_pipelines_IStageHost, _aws_cdk_pipelines_AssetPublishingCommand, _aws_cdk_pipelines_BaseStageOptions, _aws_cdk_pipelines_AddStageOptions, _aws_cdk_pipelines_AddManualApprovalOptions, _aws_cdk_pipelines_SimpleSynthOptions, _aws_cdk_pipelines_SimpleSynthActionProps, _aws_cdk_pipelines_AdditionalArtifact, _aws_cdk_pipelines_SimpleSynthAction, _aws_cdk_pipelines_StandardNpmSynthOptions, _aws_cdk_pipelines_StandardYarnSynthOptions, _aws_cdk_pipelines_DeployCdkStackActionOptions, _aws_cdk_pipelines_DeployCdkStackActionProps, _aws_cdk_pipelines_CdkStackActionFromArtifactOptions, _aws_cdk_pipelines_DeployCdkStackAction, _aws_cdk_pipelines_FromStackArtifactOptions, _aws_cdk_pipelines_PublishAssetsActionProps, _aws_cdk_pipelines_PublishAssetsAction, _aws_cdk_pipelines_UpdatePipelineActionProps, _aws_cdk_pipelines_UpdatePipelineAction, _aws_cdk_pipelines_ShellScriptActionProps, _aws_cdk_pipelines_ShellScriptAction, _aws_cdk_pipelines_AssetType, _aws_cdk_pipelines_FileSet, _aws_cdk_pipelines_IFileSetProducer, _aws_cdk_pipelines_ShellStepProps, _aws_cdk_pipelines_ShellStep, _aws_cdk_pipelines_FileSetLocation, _aws_cdk_pipelines_StackOutputReference, _aws_cdk_pipelines_StackDeploymentProps, _aws_cdk_pipelines_StackDeployment, _aws_cdk_pipelines_StackAsset, _aws_cdk_pipelines_StageDeploymentProps, _aws_cdk_pipelines_StageDeployment, _aws_cdk_pipelines_Step, _aws_cdk_pipelines_StackSteps, _aws_cdk_pipelines_WaveProps, _aws_cdk_pipelines_Wave, _aws_cdk_pipelines_AddStageOpts, _aws_cdk_pipelines_WaveOptions, _aws_cdk_pipelines_ManualApprovalStepProps, _aws_cdk_pipelines_ManualApprovalStep, _aws_cdk_pipelines_ArtifactMap, _aws_cdk_pipelines_CodePipelineFileSet, _aws_cdk_pipelines_CodeBuildStepProps, _aws_cdk_pipelines_CodeBuildStep, _aws_cdk_pipelines_PermissionsBroadeningCheckProps, _aws_cdk_pipelines_ConfirmPermissionsBroadening, _aws_cdk_pipelines_CodePipelineProps, _aws_cdk_pipelines_CodeBuildOptions, _aws_cdk_pipelines_CodePipeline, _aws_cdk_pipelines_ProduceActionOptions, _aws_cdk_pipelines_ICodePipelineActionFactory, _aws_cdk_pipelines_CodePipelineActionFactoryResult, _aws_cdk_pipelines_CodePipelineSource, _aws_cdk_pipelines_GitHubSourceOptions, _aws_cdk_pipelines_S3SourceOptions, _aws_cdk_pipelines_ECRSourceOptions, _aws_cdk_pipelines_ConnectionSourceOptions, _aws_cdk_pipelines_CodeCommitSourceOptions, _aws_cdk_pipelines_PipelineBaseProps, _aws_cdk_pipelines_PipelineBase, _aws_cdk_pipelines_DockerCredential, _aws_cdk_pipelines_ExternalDockerCredentialOptions, _aws_cdk_pipelines_EcrDockerCredentialOptions, _aws_cdk_pipelines_DockerCredentialUsage };
